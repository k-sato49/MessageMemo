package com.example.MessageMemo;	
	
import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
//import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.ResponseBody;
import java.text.SimpleDateFormat;        //SimpleDataFormatクラスをインポート
import java.text.ParseException; //try-catch構文で使うもの
import javax.servlet.http.HttpServletRequest;
import java.util.Date;



@Controller 	
public class MessageController {	
	@Autowired	// This means to get the bean called CustomerRepository
	// Which is auto-generated by Spring, we will use it to handle the data
private CustomerRepository customerRepository;
	@Autowired
private EmployeeRepository employeeRepository;
	@Autowired
private MessageRepository messageRepository;
	@Autowired
private MessageRepository rep;
 
	@RequestMapping("/msgmemo/inputForm")
    
	public String memo(Model model) {
			// M_CUSTOMERテーブルの全データを取得
		Iterable<Customer> customerList = customerRepository.findAll();
			
			// モデルに属性追加
		model.addAttribute("customerlist",customerList);
			
			//M_EMPLOYEEテーブルの全データうを取得
		Iterable<Employee> employeeList = employeeRepository.findAll();
			
			// モデルに属性追加
		model.addAttribute("employeelist",employeeList);
		return "memo";
	}
	//リンク先
	@PostMapping(path="/msgmemo/inputForm")
	public  String addNewMessage(	  Model model
												, @RequestParam String to_name
												, @RequestParam String receiver_cd
												, @RequestParam String custmer_cd
												, @RequestParam String sender
												, @RequestParam String message_cd
												, @RequestParam String memo
												, HttpServletRequest request)throws ParseException {
//自動採番に必要　m_idが0の時は1にする、それ以降は+1していく	
		int cnt =rep.countt_message();
		
		int m_id;
		if(cnt == 0) {
			m_id= 1;
		}else {
			m_id= cnt+1;
		}
		
		
		
		Message messageAddData = new Message();
		messageAddData.setAll(m_id,to_name,receiver_cd,custmer_cd,sender,message_cd,memo);
		
		//Timestamp型を適切な型に変える
		 try{        //try文
			 String[] receiv_time = request.getParameterValues("receiv_time[]");
             SimpleDateFormat sdf =new SimpleDateFormat("yyyy/MM/ddhh:mm");
          if(receiv_time[3].equals("AM")){
        	  String str = receiv_time[0] +"/"+receiv_time[1]+"/"+receiv_time[2] + receiv_time[4] +":"+receiv_time[5] ;
        	  Date date =sdf.parse(str);
        	  Timestamp ts = new Timestamp(date.getTime());
        	  messageAddData.setReceiv_time(ts); 
          }else {
        	  int pm_time = Integer.parseInt(receiv_time[4])+12;
        	  String change_time = String.valueOf(pm_time);   
        	  String str = receiv_time[0] + "/" +  receiv_time[1] + "/" + receiv_time[2] + change_time + ":" + receiv_time[5] ;
        	  Date date = sdf.parse(str);
				Timestamp ts = new Timestamp(date.getTime());
				messageAddData.setReceiv_time(ts);
          }
		 }catch(NullPointerException e) {
			System.out.println("例外が発生しました");
		} 
		  
        //登録処理が実行された場合、上部にさん宛てに入れた名前＋  さん宛てのメッセージを登録しました。と表示
		model.addAttribute("msg", to_name + "さん宛てのメッセージを登録しました。"); 
    
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		messageAddData.setCreate_date(timestamp);
		messageAddData.setCreate_user("springuser");
		messageAddData.setUpdate_date(timestamp);
		messageAddData.setUpdate_user("springuser");
		
	
		
		messageRepository.save(messageAddData);

		  

		// モデルに属性追加
		Iterable<Customer> customerList = customerRepository.findAll();
		
		model.addAttribute("customerlist",customerList);
		
		Iterable<Employee> employeeList = employeeRepository.findAll();
		
		// モデルに属性追加
		model.addAttribute("employeelist",employeeList);
		return "memo";
	}
       	
}		
	
	
	
