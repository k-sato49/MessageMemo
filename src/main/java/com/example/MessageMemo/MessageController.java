package com.example.MessageMemo;	
	
import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.ResponseBody;
import java.text.SimpleDateFormat;        //SimpleDataFormatクラスをインポート
import java.text.ParseException; //try-catch構文で使うもの
import javax.servlet.http.HttpServletRequest;
import java.util.Date;
import java.util.ArrayList;



@Controller 	
public class MessageController {	
	@Autowired	// This means to get the bean called CustomerRepository
	// Which is auto-generated by Spring, we will use it to handle the data
private CustomerRepository customerRepository;
	@Autowired
private EmployeeRepository employeeRepository;
	@Autowired
private MessageRepository messageRepository;
	@Autowired
private MessageRepository rep;
	@Autowired
private HistoryRepository historyRepository;
	
	@RequestMapping("/msgmemo/inputForm")
    
	public String memo(Model model) {
			// M_CUSTOMERテーブルの全データを取得
		Iterable<Customer> customerList = customerRepository.findAll();
			
			// モデルに属性追加
		model.addAttribute("customerlist",customerList);
			
			//M_EMPLOYEEテーブルの全データうを取得
		Iterable<Employee> employeeList = employeeRepository.findAll();
			
			// モデルに属性追加
		model.addAttribute("employeelist",employeeList);
		return "memo";
	}
	
	//リンク先
	@PostMapping(path="/msgmemo/inputForm")
	public  String addNewMessage(	  Model model
												, @RequestParam String to_name
												, @RequestParam String receiver_cd
												, @RequestParam String custmer_cd
												, @RequestParam String today_year
												, @RequestParam String today_month
												, @RequestParam String today_day
												, @RequestParam (value="radio",required=false)int radio
												, @RequestParam String hour
												, @RequestParam String minute
												, @RequestParam String sender
												, @RequestParam String message_cd
												, @RequestParam String memo
												, HttpServletRequest request)throws ParseException {
		if(radio == 1) {
			int h = Integer.parseInt(hour);
			h = h + 12;
			hour = String.valueOf(h);
		}else if (radio == 0) {
			int h = Integer.parseInt(hour);
			hour = String.valueOf(h);
		}
		
//自動採番に必要　m_idが0の時は1にする、それ以降は+1していく	
		int cnt =rep.countt_message();
		
		int m_id;
		if(cnt == 0) {
			m_id= 1;
		}else {
			m_id= cnt+1;
		}
		
		
		
		Message messageAddData = new Message();
		messageAddData.setAll(m_id,to_name,receiver_cd,custmer_cd,sender,message_cd,memo);
		
		//Timestamp型を適切な型に変える
		try {
			SimpleDateFormat sdFormat = new SimpleDateFormat("yyyy/MM/dd hh:mm");
			String str = today_year + "/" + today_month + "/" + today_day + " " + hour + ":" + minute;
			Date date = sdFormat.parse(str);
			Timestamp ts = new Timestamp(date.getTime());
			messageAddData.setReceiv_time(ts); 
			

		 }catch(NullPointerException e) {
			System.out.println("例外が発生しました");
		} 
		  
        //登録処理が実行された場合、上部にさん宛てに入れた名前＋  さん宛てのメッセージを登録しました。と表示
		model.addAttribute("msg", to_name + "さん宛てのメッセージを登録しました。"); 
    
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		messageAddData.setCreate_date(timestamp);
		messageAddData.setCreate_user("springuser");
		messageAddData.setUpdate_date(timestamp);
		messageAddData.setUpdate_user("springuser");
		
	
		
		messageRepository.save(messageAddData);

		  

		// モデルに属性追加
		Iterable<Customer> customerList = customerRepository.findAll();
		
		model.addAttribute("customerlist",customerList);
		
		Iterable<Employee> employeeList = employeeRepository.findAll();
		
		// モデルに属性追加
		model.addAttribute("employeelist",employeeList);
		return "memo";
	}
//	@RequestMapping("/msgmemo/history")
//    public String history() {
//		// データ登録画面を表示
//        return "history";
//    }

	@GetMapping(path="/msgmemo/history") 
	public String history(Model model) {
			// M_CUSTOMERテーブルの全データを取得
		//Iterable<Customer> customerList = customerRepository.findAll();
			
		// モデルに属性追加
		//model.addAttribute("customerlist",customerList);
			
			//M_EMPLOYEEテーブルの全データうを取得
		//Iterable<Employee> employeeList = employeeRepository.findAll();
			
			// モデルに属性追加
		//model.addAttribute("employeelist",employeeList);
		
		//Iterable<Message> messageList = messageRepository.findAll();
		
		//model.addAttribute("messagelist",messageList);
		
		ArrayList<History> historyList = historyRepository.histories();
//		
//		// モデルに属性追加
	   model.addAttribute("historylist",historyList);
		//
	return "history";
	}

	
}		
	
	
	
